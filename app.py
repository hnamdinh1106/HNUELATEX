import os
import time
import streamlit as st
from PIL import Image,ImageEnhance 
from streamlit_drawable_canvas import st_canvas
from sympy import sympify, parse_expr, lambdify
from sympy.parsing.latex import parse_latex
from scipy.optimize import fsolve
from rapid_latex_ocr import LaTeXOCR
from dotenv import load_dotenv
import io
import logging
import traceback
import numpy as np
from datetime import datetime
import cv2

# G·ªçi set_page_config
st.set_page_config(page_title="HNUE Latex OCR", layout="wide")

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s: %(message)s',
    handlers=[
        logging.FileHandler('app_log.txt', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# Kh·ªüi t·∫°o OCR
latex_ocr = LaTeXOCR()

# H√†m l∆∞u l·ªãch s·ª≠
def save_history(entry):
    try:
        os.makedirs('history', exist_ok=True)
        today = datetime.now().strftime("%Y-%m-%d")
        history_file = f"history/history_{today}.txt"
        with open(history_file, "a", encoding='utf-8') as file:
            file.write(f"{datetime.now()} - {entry}\n")
    except Exception as e:
        logging.error(f"Error saving history: {str(e)}")

# H√†m xu·∫•t l·ªãch s·ª≠
def export_history():
    try:
        history_files = sorted(
            [f for f in os.listdir('history') if f.startswith('history_')],
            reverse=True
        )
        if history_files:
            selected_file = st.selectbox("Select History File", history_files)
            with open(os.path.join('history', selected_file), 'r', encoding='utf-8') as f:
                history_content = f.read()
            st.download_button(
                label="Download History",
                data=history_content,
                file_name=selected_file,
                mime='text/plain'
            )
    except Exception as e:
        st.error(f"Error exporting history: {str(e)}")
        
        
# H√†m ti·ªÅn x·ª≠ l√Ω ·∫£nh
def preprocess_image(image):
    try:
        # Chuy·ªÉn ƒë·ªïi PIL Image sang ƒë·ªãnh d·∫°ng numpy
        image_array = np.array(image)
        
        # Chuy·ªÉn ƒë·ªïi ·∫£nh sang thang x√°m
        gray_image = cv2.cvtColor(image_array, cv2.COLOR_RGB2GRAY)
        
        # C√¢n b·∫±ng histogram
        equalized_image = cv2.equalizeHist(gray_image)
        
        # ƒêi·ªÅu ch·ªânh gamma
        def adjust_gamma(image, gamma=1.2):
            inv_gamma = 1.0 / gamma
            table = np.array([((i / 255.0) ** inv_gamma) * 255 for i in np.arange(0, 256)]).astype("uint8")
            return cv2.LUT(image, table)
        
        gamma_corrected = adjust_gamma(equalized_image)
        
        # Chuy·ªÉn v·ªÅ ƒë·ªãnh d·∫°ng PIL Image
        processed_image = Image.fromarray(gamma_corrected)
        return processed_image
    except Exception as e:
        logging.error(f"L·ªói x·ª≠ l√Ω ·∫£nh: {traceback.format_exc()}")
        return image  # Tr·∫£ l·∫°i ·∫£nh g·ªëc n·∫øu l·ªói

# H√†m chuy·ªÉn ƒë·ªïi ·∫£nh sang LaTeX
def convert_image_to_latex(image_data):
    try:
        result, _ = latex_ocr(image_data)
        return result
    except Exception as e:
        logging.error(f"L·ªói OCR: {traceback.format_exc()}")
        return f"Error: {str(e)}"

# H√†m gi·∫£i to√°n n√¢ng cao
def solve_advanced_equation(latex_equation):
    try:
        # Parse LaTeX th√†nh bi·ªÉu th·ª©c SymPy
        equation = parse_latex(latex_equation)
        expr = equation.lhs - equation.rhs
        
        # H√†m lambdify ƒë·ªÉ s·ªë h√≥a bi·ªÉu th·ª©c
        func = lambdify('x', expr, 'numpy')
        
        # D√πng fsolve t·ª´ SciPy ƒë·ªÉ gi·∫£i nghi·ªám
        solution = fsolve(func, [0])  # B·∫Øt ƒë·∫ßu t·ª´ gi√° tr·ªã x=0
        return solution
    except Exception as e:
        logging.error(f"L·ªói gi·∫£i to√°n: {traceback.format_exc()}")
        return f"Error: {str(e)}"

# H√†m gi·ªØ nguy√™n ·∫£nh kh√¥ng b·ªã c·∫Øt x√©n
def resize_image_maintain_aspect_ratio(image, max_width=1200):
    """Resize ·∫£nh gi·ªØ nguy√™n t·ª∑ l·ªá v·ªõi chi·ªÅu r·ªông t·ªëi ƒëa"""
    width, height = image.size
    if width > max_width:
        ratio = max_width / width
        new_width = max_width
        new_height = int(height * ratio)
        image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
    return image

# H√†m c·∫Øt v√πng ·∫£nh
def crop_image(image_array, bbox):
    x, y, width, height = bbox
    cropped_image = image_array[y:y + height, x:x + width]
    return cropped_image

# UI: Chuy·ªÉn ƒë·ªïi LaTeX
def convert_latex_ui():
    st.header("üìÑ Chuy·ªÉn ·∫¢nh Sang LaTeX")
    uploaded_file = st.file_uploader("T·∫£i ·∫£nh to√°n h·ªçc", type=["png", "jpg", "jpeg"], help="H·ªó tr·ª£ ·∫£nh ch·ª©a c√¥ng th·ª©c to√°n h·ªçc")
    
    if uploaded_file:
        image = Image.open(uploaded_file)
        image = resize_image_maintain_aspect_ratio(image)
        # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
        with st.spinner("ƒêang ti·ªÅn x·ª≠ l√Ω ·∫£nh..."):
            image = preprocess_image(image)
            
        # T·∫°o container ƒë·ªÉ ki·ªÉm so√°t chi·ªÅu r·ªông hi·ªÉn th·ªã
        col1, col2 = st.columns([2, 1])
        with col1:
                st.image(image, caption="·∫¢nh ƒë√£ t·∫£i", use_column_width=True)
        #Chuy·ªÉn ƒë·ªïi ·∫£nh sang array
        image_array = np.array(image)
            
        st.write("üîç Ch·ªçn v√πng c·∫ßn x·ª≠ l√Ω:")
        canvas_result = st_canvas(
                fill_color="rgba(255, 165, 0, 0.3)",
                stroke_width=2,
                background_image=image,
                update_streamlit=True,
                height=image.height,
                width=image.width,
                drawing_mode="rect",
                key="canvas",
                display_toolbar=True
            )

        if canvas_result.json_data is not None:
                for rect in canvas_result.json_data["objects"]:
                    if rect["type"] == "rect":
                        x = int(rect["left"])
                        y = int(rect["top"])
                        width = int(rect["width"])
                        height = int(rect["height"])
                        cropped = crop_image(image_array, (x, y, width, height))
                        st.image(cropped, caption="V√πng ƒë∆∞·ª£c ch·ªçn", use_column_width=True)

                        with st.spinner('ƒêang chuy·ªÉn ƒë·ªïi LaTeX...'):
                            buffered = io.BytesIO()
                            cropped_image = Image.fromarray(cropped)
                            cropped_image.save(buffered, format="PNG")
                            latex_result = convert_image_to_latex(buffered.getvalue())

                            if "Error" not in latex_result:
                                st.success("Chuy·ªÉn ƒë·ªïi LaTeX th√†nh c√¥ng:")
                                st.code(latex_result, language='latex')
                                save_history(f"LaTeX chuy·ªÉn ƒë·ªïi: {latex_result}")
                                
def solve_math_ui():
    st.header("üî¢ Gi·∫£i To√°n T·ª´ LaTeX")
    latex_equation = st.text_input("Nh·∫≠p c√¥ng th·ª©c LaTeX c·∫ßn gi·∫£i:", help="V√≠ d·ª•: x^2 + 3*x - 4 = 0")
    
    if st.button("Gi·∫£i"):
        with st.spinner("ƒêang gi·∫£i b√†i to√°n..."):
            if latex_equation:
                solution = solve_advanced_equation(latex_equation)
                if "Error" not in str(solution):
                    st.success("L·ªùi gi·∫£i:")
                    st.write(solution)
                    save_history(f"L·ªùi gi·∫£i: {solution}")
                else:
                    st.error("Kh√¥ng th·ªÉ gi·∫£i b√†i to√°n.")
            else:
                st.warning("Vui l√≤ng nh·∫≠p c√¥ng th·ª©c.")

# UI: L·ªãch s·ª≠
def history_ui():
    st.header("üìú L·ªãch S·ª≠ Ho·∫°t ƒê·ªông")
    export_history()

#Custom CSS
def apply_custom_css():
    st.markdown("""
    <style>
    /* Thay ƒë·ªïi to√†n b·ªô n·ªÅn */
    body {
        background-color: #F0F8FF;
        font-family: Arial, sans-serif;
    }

    /* Header */
    .css-18e3th9 {
        background-color: #4CAF50 !important;
        color: white !important;
        text-align: center;
        font-size: 24px;
        border-radius: 8px;
        padding: 10px;
    }

    /* Sidebar */
    .css-1d391kg {
        background-color: #FFFFFF !important;
        border-radius: 10px;
        padding: 10px;
    }

    /* N√∫t b·∫•m */
    button {
        background-color: #4CAF50;
        color: white;
        border-radius: 5px;
        font-size: 16px;
        padding: 8px 12px;
        border: none;
        transition: 0.3s;
    }

    button:hover {
        background-color: #45A049;
        cursor: pointer;
    }

    /* Input box */
    .stTextInput input {
        background-color: #FFFFFF;
        border: 1px solid #4CAF50;
        border-radius: 5px;
        padding: 8px;
        color: #333333;
    }
    </style>
    """, unsafe_allow_html=True)

# Main
def main():
    apply_custom_css()
    st.title("üìò HNUE LATEX OCR")
    st.sidebar.header("üîß T√≠nh nƒÉng")
    feature = st.sidebar.radio("Ch·ªçn ch·ª©c nƒÉng", ["Chuy·ªÉn ƒê·ªïi LaTeX", "Gi·∫£i To√°n", "L·ªãch S·ª≠"])

    if feature == "Chuy·ªÉn ƒê·ªïi LaTeX":
        convert_latex_ui()
    elif feature == "Gi·∫£i To√°n":
        solve_math_ui()
    elif feature == "L·ªãch S·ª≠":
        history_ui()

if __name__ == "__main__":
    main()
